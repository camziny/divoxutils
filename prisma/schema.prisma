generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") 
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 Int     @id @default(autoincrement()) @unique
  userId             Int?     @unique
  user               User?    @relation(fields: [userId], references: [id])
  providerType       String
  providerId         String
  providerAccountId  String  @unique
  password           String?
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
}

model User {
  id           Int             @id @default(autoincrement())
  clerkUserId  String          @unique
  email        String          @unique
  name         String?         @unique
  accountId    Int?            @unique
  account      Account?
  characters   UserCharacter[]
  groupUsers   GroupUser[]
}

model Character {
  id                      Int    @id @default(autoincrement())
  webId                   String @unique
  characterName           String @default("Unknown")
  className               String @default("Unknown")
  realm                   String @default("Unknown")
  previousCharacterName   String?
  users                   UserCharacter[]
  totalRealmPoints        Int    @default(0)
  realmPointsLastWeek     Int    @default(0)
  totalSoloKills          Int    @default(0)
  soloKillsLastWeek       Int    @default(0)
  totalDeaths             Int    @default(0)
  deathsLastWeek          Int    @default(0)
  totalDeathBlows         Int    @default(0)
  deathBlowsLastWeek      Int    @default(0)
  lastUpdated             DateTime? @default(now())
  nameLastUpdated         DateTime? @default(now())
  heraldCharacterWebId    String?
  heraldName              String?
  heraldServerName        String?
  heraldRealm             Int?
  heraldRace              String?
  heraldClassName         String?
  heraldLevel             Int?
  heraldGuildName         String?
  heraldRealmPoints       Int?
  heraldBountyPoints      Int?
  heraldTotalKills        Int?
  heraldTotalDeaths       Int?
  heraldTotalDeathBlows   Int?
  heraldTotalSoloKills    Int?
  heraldMidgardKills      Int?
  heraldMidgardDeaths     Int?
  heraldMidgardDeathBlows Int?
  heraldMidgardSoloKills  Int?
  heraldAlbionKills       Int?
  heraldAlbionDeaths      Int?
  heraldAlbionDeathBlows  Int?
  heraldAlbionSoloKills   Int?
  heraldHiberniaKills     Int?
  heraldHiberniaDeaths    Int?
  heraldHiberniaDeathBlows Int?
  heraldHiberniaSoloKills Int?
  heraldMasterLevel       String?
}


model UserCharacter {
  clerkUserId   String
  user          User           @relation(fields: [clerkUserId], references: [clerkUserId])
  characterId   Int
  character     Character      @relation(fields: [characterId], references: [id])
  @@id([clerkUserId, characterId])
}

model BatchState {
  key   String @id
  value Int
}

model Group {
  id            Int         @id @default(autoincrement())
  public        Boolean     @default(true)
  name          String
  realm         String?
  groupOwner    String
  groupUsers    GroupUser[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model GroupUser {
  id            Int    @id @default(autoincrement())
  groupId       Int
  clerkUserId   String
  characterId   Int?
  isInActiveGroup    Boolean     @default(false)
  group         Group       @relation(fields: [groupId], references: [id])
  user          User        @relation(fields: [clerkUserId], references: [clerkUserId])

  @@index([groupId, clerkUserId])
}

model HeraldBatchState {
  key                   String  @id
  lastProcessedCharacterId  Int
}




